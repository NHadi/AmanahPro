definitions:
  dto.MenuWithPermissionDTO:
    properties:
      menu_id:
        description: The ID of the menu
        type: integer
      menu_name:
        description: The name of the menu
        type: string
      path:
        description: The path of the menu
        type: string
      permission:
        description: The permission string (e.g., CRUD, R, D)
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handlers.MenuPermissionSet:
    properties:
      menu_id:
        type: integer
      permission:
        description: e.g., C, CR, CRU, CRUD
        type: string
    required:
    - menu_id
    - permission
    type: object
  handlers.PermissionAssignmentRequest:
    properties:
      permissions:
        items:
          $ref: '#/definitions/handlers.MenuPermissionSet'
        type: array
      role_id:
        type: integer
    required:
    - permissions
    - role_id
    type: object
  models.Menu:
    properties:
      createdAt:
        type: string
      icon:
        type: string
      menuID:
        type: integer
      menuName:
        type: string
      order:
        type: integer
      parentID:
        description: Nullable to allow root items
        type: integer
      path:
        type: string
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      description:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      organizationId:
        type: integer
      password:
        type: string
      status:
        type: boolean
      updatedAt:
        type: string
      userID:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is the User Management API documentation with role and permission
    management.
  title: User Management API
  version: "1.0"
paths:
  /api/menus:
    post:
      consumes:
      - application/json
      description: Create a new menu entry
      parameters:
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Menu'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - Menus
  /api/menus/{roleID}:
    get:
      parameters:
      - description: Role ID
        in: path
        name: roleID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MenuWithPermissionDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get accessible menus by role ID
      tags:
      - Menu
  /api/permissions/assign:
    post:
      consumes:
      - application/json
      description: Assign specific combined permissions (e.g., C, CR, CRUD) to a role
        on given menus
      parameters:
      - description: Permission Assignment
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/handlers.PermissionAssignmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions assigned successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign combined permissions to a role for multiple menus
      tags:
      - Permissions
  /api/roles:
    get:
      consumes:
      - application/json
      description: Retrieve all roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role with provided details
      parameters:
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /api/users:
    post:
      consumes:
      - application/json
      description: Create a new user with provided details
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Provide your JWT token with "Bearer " prefix, e.g., "Bearer <token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
